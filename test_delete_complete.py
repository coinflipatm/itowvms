#!/usr/bin/env python3
"""
Test the complete delete flow to ensure everything works end-to-end
"""

import requests
import json
import sqlite3

def test_complete_delete_flow():
    """Test the complete delete functionality"""
    print("Testing Complete Delete Flow...")
    print("=" * 50)
    
    # Create a test vehicle for deletion
    test_call_number = "DELETE_TEST_001"
    
    try:
        # 1. Create a test vehicle
        conn = sqlite3.connect('/workspaces/itowvms/vehicles.db')
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT OR REPLACE INTO vehicles (
                towbook_call_number, make, model, color, year, status, tow_date
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (test_call_number, "Test", "Vehicle", "Red", "2020", "Released", "2024-06-01"))
        
        conn.commit()
        conn.close()
        print(f"‚úÖ Created test vehicle: {test_call_number}")
        
        # 2. Verify it exists
        response = requests.get(f"http://127.0.0.1:5001/api/vehicles")
        if response.status_code == 200:
            vehicles = response.json()
            test_vehicle_exists = any(v.get('towbook_call_number') == test_call_number for v in vehicles)
            if test_vehicle_exists:
                print("‚úÖ Test vehicle found in API response")
            else:
                print("‚ùå Test vehicle not found in API response")
                return False
        
        # 3. Test authentication and delete
        session = requests.Session()
        
        # Try different login credentials
        credentials = [
            {'username': 'admin', 'password': 'admin123'},
            {'username': 'test_admin', 'password': 'test123'}
        ]
        
        authenticated = False
        for creds in credentials:
            login_response = session.post('http://127.0.0.1:5001/login', data=creds)
            if login_response.status_code == 200:
                print(f"‚úÖ Authenticated as {creds['username']}")
                authenticated = True
                break
        
        if not authenticated:
            print("‚ö†Ô∏è Could not authenticate, but testing API endpoint directly")
            
        # 4. Test the delete API endpoint
        delete_response = session.delete(f"http://127.0.0.1:5001/api/vehicles/{test_call_number}")
        print(f"Delete API response: {delete_response.status_code}")
        
        if delete_response.status_code == 200:
            result = delete_response.json()
            print(f"‚úÖ Delete API successful: {result}")
            
            # 5. Verify deletion
            conn = sqlite3.connect('/workspaces/itowvms/vehicles.db')
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM vehicles WHERE towbook_call_number = ?", (test_call_number,))
            count = cursor.fetchone()[0]
            conn.close()
            
            if count == 0:
                print("‚úÖ Vehicle successfully deleted from database")
                return True
            else:
                print("‚ùå Vehicle still exists in database")
                return False
        else:
            print(f"‚ùå Delete failed: {delete_response.status_code}")
            if delete_response.content:
                try:
                    error_data = delete_response.json()
                    print(f"Error details: {error_data}")
                except:
                    print(f"Error text: {delete_response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error during test: {e}")
        return False

def cleanup_test_vehicles():
    """Clean up any test vehicles"""
    try:
        conn = sqlite3.connect('/workspaces/itowvms/vehicles.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM vehicles WHERE towbook_call_number LIKE 'DELETE_TEST_%'")
        deleted = cursor.rowcount
        conn.commit()
        conn.close()
        if deleted > 0:
            print(f"Cleaned up {deleted} test vehicles")
    except Exception as e:
        print(f"Error during cleanup: {e}")

if __name__ == "__main__":
    success = test_complete_delete_flow()
    print(f"\nTest result: {'PASSED' if success else 'FAILED'}")
    cleanup_test_vehicles()
    
    if success:
        print("\nüéâ DELETE FUNCTIONALITY IS WORKING!")
        print("Summary of what was fixed:")
        print("  ‚úÖ Added missing deleteVehicle function to main.js")
        print("  ‚úÖ Function includes user confirmation dialog")
        print("  ‚úÖ Function shows loading states during deletion")
        print("  ‚úÖ Function handles errors gracefully")
        print("  ‚úÖ Function refreshes the vehicle list after successful deletion")
        print("  ‚úÖ API endpoint /api/vehicles/{call_number} DELETE method works")
        print("  ‚úÖ Database deletion function works correctly")
    else:
        print("\n‚ùå Some issues remain - check the error messages above")
